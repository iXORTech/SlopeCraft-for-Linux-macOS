cmake_minimum_required(VERSION 3.5)

set(SlopeCraft_version 3.10.0)

project(SlopeCraft VERSION ${SlopeCraft_version} LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 20)


# manage the install prefix
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install_app)
set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX})
set(CMAKE_INSTALL_BINDIR ${CMAKE_INSTALL_PREFIX})

if(EXISTS ${CMAKE_SOURCE_DIR}/compile_commands.json)
    #delete files here
    file(REMOVE ${CMAKE_SOURCE_DIR}/compile_commands.json)
endif()

# manage the include dir of HeuristicFlow
set(SlopeCraft_HeuristicFlow_include_dir /usr/local/lib/HeuristicFlow-1.6.2.1)


# manage the include dir of Eigen
set(SlopeCraft_Eigen3_include_dir /usr/local/Cellar/eigen/3.4.0_1/include/eigen3)

include(cmake/find_nlohmann_json.cmake)
include(cmake/find_Eigen3.cmake)
include(cmake/find_HeuristicFlow.cmake)

#set(Qt6_DIR "D:\\Qt\\6.2.4\\msvc2022-shared")
# manage the directory of Qt
if(DEFINED Qt6_DIR)
    set(SlopeCraft_Qt_root_dir ${Qt6_DIR})
else()
    set(SlopeCraft_Qt_root_dir /usr/local/Cellar/qt/6.3.2)
endif()
if(NOT DEFINED SlopeCraft_Qt_root_dir)
    message(FATAL_ERROR "Please set the variable \"SlopeCraft_Qt_root_dir\". Otherwise cmake can\'t find Qt6")
endif()

set(CMAKE_PREFIX_PATH ${SlopeCraft_Qt_root_dir})
set(QT_DIR ${SlopeCraft_Qt_root_dir}/lib/cmake/Qt6)
set(QT_QMAKE_EXECUTABLE ${SlopeCraft_Qt_root_dir}/bin/qmake.exe)

# find lupdate and lrelease of qt
include(cmake/find_qt_translate.cmake)


# If it is set to ON, everytime CMake reconfigure the project, all .ts files will be updated.
set(SlopeCraft_update_ts_files OFF)

if(NOT DEFINED SlopeCraft_use_Eigen_vectorize)
    set(SlopeCraft_use_Eigen_vectorize OFF)
endif()

add_definitions("-D_USE_MATH_DEFINES")
add_definitions("-DSCL_FIND_GlobalEnums_BY_PATH")

# if don't vectorize, or no suitable flag found, this variable will be empty
set(SlopeCraft_vectorize_flags) 
if(${SlopeCraft_use_Eigen_vectorize})
    include(CheckCXXCompilerFlag)

    check_cxx_compiler_flag("-march=native" _march_native_works)
    check_cxx_compiler_flag("-xHost" _xhost_works)
    
    if(${_march_native_works})
        message(STATUS "Vectorize using -march=native")
        set(SlopeCraft_vectorize_flags "-march=native")
    elseif(${_xhost_works})
        message(STATUS "Vectorize using -xHost")
        set(SlopeCraft_vectorize_flags "-xHost")
    else()
        message(STATUS "No suitable compiler flag found for vectorization")
    endif()

    list(APPEND SlopeCraft_vectorize_flags "-O3")
endif()

add_subdirectory(utilities)
add_subdirectory(imageCutter)
add_subdirectory(SlopeCraftL)
add_subdirectory(SlopeCraftMain)
add_subdirectory(MapViewer)
add_subdirectory(tests)
add_subdirectory(VisualCraftL)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Install icon for macOS
if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    # imageCutter.app
    file(GLOB imageCutter_Icon "imageCutter/others/imageCutterIconNew.icns")
    install(FILES ${imageCutter_Icon}
        DESTINATION ${CMAKE_INSTALL_PREFIX}/imageCutter.app/Contents/Resources)
    # SlopeCraft.app
    file(GLOB SlopeCraft_Icon "SlopeCraftMain/others/SlopeCraftIconNew.icns")
    install(FILES ${SlopeCraft_Icon}
        DESTINATION ${CMAKE_INSTALL_PREFIX}/SlopeCraft.app/Contents/Resources)
    # MapViewer.app
    file(GLOB MapViewer_Icon "MapViewer/others/MapViewer.icns")
    install(FILES ${MapViewer_Icon}
        DESTINATION ${CMAKE_INSTALL_PREFIX}/MapViewer.app/Contents/Resources)
endif()


set(SlopeCraft_readme_and_license_files
    
    LICENSE 
    README.md 
    README_EN.md
    docs/简体中文版协议.txt
    )

install(FILES ${SlopeCraft_readme_and_license_files}
    DESTINATION ${CMAKE_INSTALL_PREFIX})
